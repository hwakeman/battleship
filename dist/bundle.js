(()=>{"use strict";class r{constructor(r,t){if(t<=0)throw new Error("Incorrect Length Error");if(""===r)throw new Error("Empty Name Error");if("string"!=typeof r)throw new Error("Type Error");if("number"!=typeof t)throw new Error("Type Error");this.name=r,this.length=t,this.hits=0}hit(){this.hits++}isSunk(){return this.length<=this.hits}}let t=new r("destroyer",5),o=new class{constructor(r,t){this.board=Array.from({length:r},(()=>Array(t).fill(""))),this.shipList=[]}place(t,o,e,h){if(!(t instanceof r)||"number"!=typeof o||o<=0||o%1!=0||"number"!=typeof e||e<=0||e%1!=0||"boolean"!=typeof h)throw new Error("Type Error");if(this.shipList.push(t),h){if(o+t.length>this.board[0].length)throw new Error("Ship Off Board Error");let r=this.board.length-e-1;for(let e=o;e<o+t.length;e++){if(""!==this.board[r][e])throw new Error("Ship Overlap Error");this.board[r][e]=t.name}}else{if(e-t.length>0)throw new Error("Ship Off Board Error");let r=this.board.length-e-1;for(let e=r;e>r-t.length;e--){if(""!==this.board[e][o])throw new Error("Ship Overlap Error");this.board[e][o]=t.name}}}}(10,10);o.place(t,3,4,!1),console.log(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFBZSxNQUFNQSxFQUNqQixXQUFBQyxDQUFZQyxFQUFNQyxHQUNkLEdBQUdBLEdBQVUsRUFBRyxNQUFNLElBQUlDLE1BQU0sMEJBQ2hDLEdBQVksS0FBVEYsRUFBYSxNQUFNLElBQUlFLE1BQU0sb0JBQ2hDLEdBQW1CLGlCQUFURixFQUFtQixNQUFNLElBQUlFLE1BQU0sY0FDN0MsR0FBcUIsaUJBQVhELEVBQXFCLE1BQU0sSUFBSUMsTUFBTSxjQUUvQ0MsS0FBS0gsS0FBT0EsRUFDWkcsS0FBS0YsT0FBU0EsRUFDZEUsS0FBS0MsS0FBTyxDQUNoQixDQUVBLEdBQUFDLEdBQ0lGLEtBQUtDLE1BQ1QsQ0FFQSxNQUFBRSxHQUNJLE9BQUdILEtBQUtGLFFBQVVFLEtBQUtDLElBRTNCLEVDaEJKLElBQUlHLEVBQU8sSUFBSVQsRUFBSyxZQUFhLEdBQzdCVSxFQUFZLElDRkQsTUFDWCxXQUFBVCxDQUFZVSxFQUFPQyxHQUNmUCxLQUFLUSxNQUFRQyxNQUFNQyxLQUFLLENBQUVaLE9BQVFRLElBQVMsSUFBTUcsTUFBTUYsR0FBUUksS0FBSyxNQUNwRVgsS0FBS1ksU0FBVyxFQUNwQixDQUVBLEtBQUFDLENBQU1ULEVBQU1VLEVBQUdDLEVBQUdDLEdBQ2QsS0FDTVosYUFBZ0JULElBQ0wsaUJBQU5tQixHQUFrQkEsR0FBSyxHQUFLQSxFQUFJLEdBQU0sR0FDaEMsaUJBQU5DLEdBQWtCQSxHQUFLLEdBQUtBLEVBQUksR0FBTSxHQUNyQixrQkFBakJDLEVBRVAsTUFBTSxJQUFJakIsTUFBTSxjQUlwQixHQURBQyxLQUFLWSxTQUFTSyxLQUFLYixHQUNoQlksRUFBYyxDQUNiLEdBQUlGLEVBQUlWLEVBQUtOLE9BQVVFLEtBQUtRLE1BQU0sR0FBR1YsT0FDakMsTUFBTSxJQUFJQyxNQUFNLHdCQUdwQixJQUFJbUIsRUFBYWxCLEtBQUtRLE1BQU1WLE9BQVNpQixFQUFJLEVBQ3pDLElBQUksSUFBSUksRUFBUUwsRUFBR0ssRUFBUUwsRUFBSVYsRUFBS04sT0FBUXFCLElBQVMsQ0FDakQsR0FBcUMsS0FBbENuQixLQUFLUSxNQUFNVSxHQUFZQyxHQUN0QixNQUFNLElBQUlwQixNQUFNLHNCQUdwQkMsS0FBS1EsTUFBTVUsR0FBWUMsR0FBU2YsRUFBS1AsSUFDekMsQ0FDSixLQUFPLENBQ0gsR0FBSWtCLEVBQUlYLEVBQUtOLE9BQVUsRUFDbkIsTUFBTSxJQUFJQyxNQUFNLHdCQUdwQixJQUFJbUIsRUFBYWxCLEtBQUtRLE1BQU1WLE9BQVNpQixFQUFJLEVBQ3pDLElBQUksSUFBSUksRUFBUUQsRUFBWUMsRUFBUUQsRUFBYWQsRUFBS04sT0FBUXFCLElBQVMsQ0FDbkUsR0FBNEIsS0FBekJuQixLQUFLUSxNQUFNVyxHQUFPTCxHQUNqQixNQUFNLElBQUlmLE1BQU0sc0JBR3BCQyxLQUFLUSxNQUFNVyxHQUFPTCxHQUFLVixFQUFLUCxJQUNoQyxDQUNKLENBQ0osR0QxQzBCLEdBQUksSUFFbENRLEVBQVVRLE1BQU1ULEVBQU0sRUFBRyxHQUFHLEdBRTVCZ0IsUUFBUUMsSUFBSWhCLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZGVscy9TaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2RlbHMvR2FtZWJvYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoaXAge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGxlbmd0aCkge1xuICAgICAgICBpZihsZW5ndGggPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbmNvcnJlY3QgTGVuZ3RoIEVycm9yJylcbiAgICAgICAgaWYobmFtZSA9PT0gJycpIHRocm93IG5ldyBFcnJvcignRW1wdHkgTmFtZSBFcnJvcicpXG4gICAgICAgIGlmKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCdUeXBlIEVycm9yJylcbiAgICAgICAgaWYodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicpIHRocm93IG5ldyBFcnJvcignVHlwZSBFcnJvcicpXG5cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZVxuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aFxuICAgICAgICB0aGlzLmhpdHMgPSAwXG4gICAgfVxuXG4gICAgaGl0KCkge1xuICAgICAgICB0aGlzLmhpdHMrK1xuICAgIH1cblxuICAgIGlzU3VuaygpIHtcbiAgICAgICAgaWYodGhpcy5sZW5ndGggPD0gdGhpcy5oaXRzKSByZXR1cm4gdHJ1ZVxuICAgICAgICBlbHNlIHJldHVybiBmYWxzZVxuICAgIH1cblxuXG59IiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vbW9kZWxzL1NoaXBcIjtcbmltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vbW9kZWxzL0dhbWVib2FyZFwiO1xuXG5sZXQgc2hpcCA9IG5ldyBTaGlwKCdkZXN0cm95ZXInLCA1KVxubGV0IGdhbWVib2FyZCA9IG5ldyBHYW1lYm9hcmQoMTAsIDEwKVxuXG5nYW1lYm9hcmQucGxhY2Uoc2hpcCwgMywgNCwgZmFsc2UpXG5cbmNvbnNvbGUubG9nKGdhbWVib2FyZCkiLCJpbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVib2FyZCB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLmJvYXJkID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogd2lkdGggfSwgKCkgPT4gQXJyYXkoaGVpZ2h0KS5maWxsKCcnKSk7XG4gICAgICAgIHRoaXMuc2hpcExpc3QgPSBbXVxuICAgIH1cblxuICAgIHBsYWNlKHNoaXAsIHgsIHksIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBpZihcbiAgICAgICAgICAgICEoc2hpcCBpbnN0YW5jZW9mIFNoaXApICB8fFxuICAgICAgICAgICAgdHlwZW9mIHggIT09ICdudW1iZXInIHx8IHggPD0gMCB8fCB4ICUgMSAhPT0gMCB8fFxuICAgICAgICAgICAgdHlwZW9mIHkgIT09ICdudW1iZXInIHx8IHkgPD0gMCB8fCB5ICUgMSAhPT0gMCB8fFxuICAgICAgICAgICAgdHlwZW9mIGlzSG9yaXpvbnRhbCAhPT0gJ2Jvb2xlYW4nXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUeXBlIEVycm9yJylcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hpcExpc3QucHVzaChzaGlwKVxuICAgICAgICBpZihpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIGlmKCh4ICsgc2hpcC5sZW5ndGgpID4gdGhpcy5ib2FyZFswXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoaXAgT2ZmIEJvYXJkIEVycm9yJylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJlYWxZVmFsdWUgPSB0aGlzLmJvYXJkLmxlbmd0aCAtIHkgLSAxXG4gICAgICAgICAgICBmb3IobGV0IGluZGV4ID0geDsgaW5kZXggPCB4ICsgc2hpcC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmJvYXJkW3JlYWxZVmFsdWVdW2luZGV4XSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGlwIE92ZXJsYXAgRXJyb3InKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbcmVhbFlWYWx1ZV1baW5kZXhdID0gc2hpcC5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZigoeSAtIHNoaXAubGVuZ3RoKSA+IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoaXAgT2ZmIEJvYXJkIEVycm9yJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHJlYWxZVmFsdWUgPSB0aGlzLmJvYXJkLmxlbmd0aCAtIHkgLSAxXG4gICAgICAgICAgICBmb3IobGV0IGluZGV4ID0gcmVhbFlWYWx1ZTsgaW5kZXggPiByZWFsWVZhbHVlIC0gc2hpcC5sZW5ndGg7IGluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmJvYXJkW2luZGV4XVt4XSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGlwIE92ZXJsYXAgRXJyb3InKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbaW5kZXhdW3hdID0gc2hpcC5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il0sIm5hbWVzIjpbIlNoaXAiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJsZW5ndGgiLCJFcnJvciIsInRoaXMiLCJoaXRzIiwiaGl0IiwiaXNTdW5rIiwic2hpcCIsImdhbWVib2FyZCIsIndpZHRoIiwiaGVpZ2h0IiwiYm9hcmQiLCJBcnJheSIsImZyb20iLCJmaWxsIiwic2hpcExpc3QiLCJwbGFjZSIsIngiLCJ5IiwiaXNIb3Jpem9udGFsIiwicHVzaCIsInJlYWxZVmFsdWUiLCJpbmRleCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9